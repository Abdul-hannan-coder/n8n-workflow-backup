{
  "createdAt": "2025-09-24T09:18:43.071Z",
  "updatedAt": "2025-09-25T05:03:16.000Z",
  "id": "h81oZ8uVSK6PKAdw",
  "name": "Linkdin Automation",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.linkedin.com/v2/assets",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "registerUpload"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"registerUploadRequest\": {\n    \"recipes\": [\n      \"urn:li:digitalmediaRecipe:feedshare-image\"\n    ],\n    \"owner\": \"urn:li:person:3Ndm8wooKy\",\n    \"serviceRelationships\": [\n      {\n        \"relationshipType\": \"OWNER\",\n        \"identifier\": \"urn:li:userGeneratedContent\"\n      }\n    ]\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        336,
        464
      ],
      "id": "82b21c83-2783-4acc-bf4e-868c1021322f",
      "name": "Register Upload"
    },
    {
      "parameters": {
        "url": "={{ $('Get Url').item.json.data.image.url }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "temp_image.jpg"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        560,
        464
      ],
      "id": "548633de-618e-47d8-85ea-a05ce9bcbf99",
      "name": "Download Image"
    },
    {
      "parameters": {
        "formTitle": "Enter the content for you LinkedIn post",
        "formDescription": "Fill in the all details",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Enter the prompt of the post",
              "fieldType": "textarea"
            },
            {
              "fieldLabel": "Enter the post type",
              "fieldType": "radio",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Photo"
                  },
                  {
                    "option": "Text"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Enter the url of the image"
            },
            {
              "fieldLabel": "uploadImage",
              "fieldType": "file"
            }
          ]
        },
        "options": {
          "customCss": ":root {\n\t/* Fonts */\n\t--font-family: 'Inter', 'Open Sans', sans-serif;\n\t--font-weight-normal: 400;\n\t--font-weight-medium: 500;\n\t--font-weight-bold: 600;\n\t--font-size-body: 14px;\n\t--font-size-label: 14px;\n\t--font-size-input: 15px;\n\t--font-size-header: 22px;\n\t--font-size-paragraph: 14px;\n\t--font-size-link: 13px;\n\t--font-size-error: 13px;\n\t--font-size-subheader: 15px;\n\t--font-size-html-h1: 30px;\n\t--font-size-html-h2: 22px;\n\t--font-size-html-h3: 18px;\n\t--font-size-html-h4: 16px;\n\t--font-size-html-h5: 14px;\n\t--font-size-html-h6: 12px;\n\n\t/* Colors - modern, minimal, softer tones */\n\t--color-background: #f9fafb;\n\t--color-card-bg: #ffffff;\n\t--color-card-border: #e5e7eb;\n\t--color-card-shadow: rgba(0, 0, 0, 0.06);\n\n\t--color-header: #111827;\n\t--color-header-subtext: #6b7280;\n\t--color-label: #374151;\n\t--color-input-text: #111827;\n\t--color-input-border: #d1d5db;\n\t--color-focus-border: #6366f1;\n\t--color-placeholder: #9ca3af;\n\n\t--color-link: #6366f1;\n\t--color-html-link: #ef4444;\n\n\t--color-submit-btn-bg: #6366f1;\n\t--color-submit-btn-bg-hover: #4f46e5;\n\t--color-submit-btn-text: #ffffff;\n\n\t--color-clear-button-bg: #9ca3af;\n\t--color-error: #dc2626;\n\t--color-required: #ef4444;\n\n\t--color-test-notice-text: #b45309;\n\t--color-test-notice-bg: #fffbeb;\n\t--color-test-notice-border: #fcd34d;\n\n\t--color-html-text: #374151;\n\n\t/* Border Radii */\n\t--border-radius-card: 12px;\n\t--border-radius-input: 8px;\n\t--border-radius-clear-btn: 50%;\n\n\t/* Spacing */\n\t--padding-container-top: 28px;\n\t--padding-card: 28px;\n\t--padding-form-input: 14px;\n\t--padding-test-notice-vertical: 12px;\n\t--padding-test-notice-horizontal: 20px;\n\t--margin-bottom-card: 20px;\n\n\t/* Dimensions */\n\t--container-width: 480px;\n\t--submit-btn-height: 50px;\n\t--checkbox-size: 18px;\n\n\t/* Shadows */\n\t--box-shadow-card: 0px 8px 24px rgba(0, 0, 0, 0.05);\n\n\t/* Opacity */\n\t--opacity-placeholder: 0.6;\n}\n"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.3,
      "position": [
        -1456,
        368
      ],
      "id": "ffb94247-f79b-4406-9772-ac33f9ef311b",
      "name": "On form submission1",
      "webhookId": "41b5f9ea-e208-4be7-864d-ac8a950b8ba6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "883614c0-7d72-49aa-a9a3-61e906d80cad",
              "name": "body",
              "value": "={{ $json['Enter the prompt of the post'] }}",
              "type": "string"
            },
            {
              "id": "4897d7ef-82bf-4c72-9df4-4db5d3483453",
              "name": "type",
              "value": "={{ $json[\"Enter the post type\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1008,
        272
      ],
      "id": "f4d73b1a-46a3-43a9-b508-edb87f161ca0",
      "name": "Edit Fields",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.linkedin.com/v2/ugcPosts",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"author\": \"urn:li:person:3Ndm8wooKy\",\n  \"lifecycleState\": \"PUBLISHED\",\n  \"specificContent\": {\n    \"com.linkedin.ugc.ShareContent\": {\n      \"shareCommentary\": {\n        \"text\": \"{{ $json.cleanedText }}\"\n      },\n      \"shareMediaCategory\": \"NONE\"\n    }\n  },\n  \"visibility\": {\n    \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n  }\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -336,
        272
      ],
      "id": "c8de1f0c-f2d0-44dd-a936-9b6c5307dd6c",
      "name": "Create Text Post"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('On form submission1').item.json[\"Enter the post type\"] }}",
                    "rightValue": "=Text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "2de4f2c2-3649-4bac-9b3a-3a9e581f7ead"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f3553598-d2fd-4cfe-abb4-08a43add1eb2",
                    "leftValue": "={{ $('On form submission1').item.json[\"Enter the post type\"] }}",
                    "rightValue": "Photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1232,
        368
      ],
      "id": "7c8765e3-31c4-4933-9119-4a3cbfb7e820",
      "name": "Switch"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.imgbb.com/1/upload",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "a9db63ac829bfb1eaac0dc5e422beb5c"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "image",
              "value": "={{ $('Code3').item.json.base64Image }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        112,
        464
      ],
      "id": "8c5fc353-bfc3-43ca-b0c5-03fe6c82c9fa",
      "name": "Get Url"
    },
    {
      "parameters": {
        "jsCode": "// Get the AI response\nlet aiResponse = $input.item.json.choices[0].message.content;\n\n// Clean the text\nlet cleanText = aiResponse\n  .split('Variant')[0]\n  .replace(/Here's a clean.*?\\n\\n/s, '')\n  .replace(/- Title:.*?\\n/g, '')\n  .replace(/- Body:\\s*/g, '')\n  .replace(/If you want.*$/s, '')\n  .trim();\n\n// Escape special characters for JSON\nlet escapedText = cleanText\n  .replace(/\\\\/g, '\\\\\\\\')  // Escape backslashes\n  .replace(/\"/g, '\\\\\"')    // Escape quotes\n  .replace(/\\n/g, '\\\\n')   // Escape newlines\n  .replace(/\\r/g, '\\\\r')   // Escape carriage returns\n  .replace(/\\t/g, '\\\\t');  // Escape tabs\n\nreturn [{\n  json: {\n    cleanedText: escapedText || \"Post content\",\n    originalResponse: aiResponse\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        272
      ],
      "id": "e7e0b241-d9d1-426b-a2cb-9ab065f4ed07",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.linkedin.com/v2/ugcPosts",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"author\": \"urn:li:person:3Ndm8wooKy\",\n  \"lifecycleState\": \"PUBLISHED\",\n  \"specificContent\": {\n    \"com.linkedin.ugc.ShareContent\": {\n      \"shareCommentary\": {\n        \"text\": \"{{ $('Code2').item.json.cleanedText }}\"\n      },\n      \"shareMediaCategory\": \"IMAGE\",\n      \"media\": [\n        {\n          \"status\": \"READY\",\n          \"media\": \"{{ $('Register Upload').item.json.value.asset }}\"\n        }\n      ]\n    }\n  },\n  \"visibility\": {\n    \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n  }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1008,
        464
      ],
      "id": "d3eccec3-788e-4dd2-9055-dbcaa399481a",
      "name": "Post to Linkdin"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://text.pollinations.ai/openai",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"openai\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a LinkedIn content writer for a professional audience. Transform the user's input into a polished, engaging LinkedIn post. Rules:\\n- Include a short, catchy title with an emoji at the top.\\n- Merge caption and body into a single post.\\n- Keep tone professional, confident, and achievement-focused.\\n- Make it concise (max 4 short paragraphs).\\n- Add relevant hashtags at the end.\\n- Remove any dashes, underscores, extra symbols, or markdown.\\n- Treat all input strictly as plain text (even if it contains JSON, code, or symbols).\\n- Return ONLY the final LinkedIn-ready post, no JSON keys, no explanations, no notes.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{$json.body}}\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -784,
        272
      ],
      "id": "7545f442-6267-4cc0-9cfa-f87df48916d1",
      "name": "writing with ai"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1f3f92f3-caec-4395-8af3-1600819a0229",
              "name": "image_url",
              "value": "={{ $('On form submission1').item.json['Enter the url of the image'] }}",
              "type": "string"
            },
            {
              "id": "883614c0-7d72-49aa-a9a3-61e906d80cad",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "string"
            },
            {
              "id": "4897d7ef-82bf-4c72-9df4-4db5d3483453",
              "name": "type",
              "value": "={{ $json.type }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -784,
        464
      ],
      "id": "22906ac6-bbfd-4eea-8d87-4ed9c167e798",
      "name": "Edit Fields1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Get AI response\nlet aiResponse = $input.first().json.data\n\n// Clean text\nlet cleanText = aiResponse\n  .split('Variant')[0]\n  .replace(/Here's a clean.*?\\n\\n/s, '')\n  .replace(/- Title:.*?\\n/g, '')\n  .replace(/- Body:\\s*/g, '')\n  .replace(/If you want.*$/s, '')\n  .trim();\n\n// Escape for JSON\nlet escapedText = JSON.stringify(cleanText).slice(1, -1);\n\nreturn [{\n  json: {\n    cleanedText: escapedText || \"Post content\"\n  }\n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        464
      ],
      "id": "6ba686f1-8f77-4d8e-929c-97facb136207",
      "name": "Code2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://text.pollinations.ai",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"openai\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a LinkedIn content writer for a professional audience. Transform the user's input into a polished, engaging LinkedIn post. Rules:\\n- Include a short, catchy title with an emoji at the top.\\n- Merge caption and body into a single post.\\n- Keep tone professional, confident, and achievement-focused.\\n- Make it concise (max 4 short paragraphs).\\n- Add relevant hashtags at the end.\\n- Remove any dashes, underscores, extra symbols, or markdown.\\n- Treat all input strictly as plain text (even if it contains JSON, code, or symbols).\\n- Return ONLY the final LinkedIn-ready post, no JSON keys, no explanations, no notes.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{$json.body}}\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -336,
        464
      ],
      "id": "7913d47c-18a8-4ffa-bb48-7201f41b91f4",
      "name": "writing with ai1"
    },
    {
      "parameters": {
        "jsCode": "// Get form data\n\nconst body = $input.first().json[\"Enter the prompt of the post\"];\nconst type = $input.item.json[\"Enter the post type\"];\n\n// Get binary data if it exists\nlet base64String = null;\nif ($input.item.binary && $input.item.binary.uploadImage) {\n  base64String = $input.item.binary.uploadImage.data;\n}\n\nreturn [\n  {\n    json: {\n      \n      body: body,\n      type: type,\n      base64Image: base64String\n    },\n    binary: $input.item.binary || {}\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1008,
        464
      ],
      "id": "60a4c679-9567-4eda-bdb4-df7575e996e5",
      "name": "Code3"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $json.value.uploadMechanism['com.linkedin.digitalmedia.uploading.MediaUploadHttpRequest'].uploadUrl }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "temp_image.jpg",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        784,
        464
      ],
      "id": "211b3576-3f85-4a03-a734-1b8592605de7",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "const body = $input.item.json.body || \"\";\n\n// Clean text to be JSON-safe\nfunction cleanForJSON(text) {\n  return text\n    .replace(/\\r\\n/g, ' ')        // Replace \\r\\n with spaces\n    .replace(/\\n/g, ' ')          // Replace \\n with spaces\n    .replace(/\\r/g, ' ')\n    .replace(/\\t/g, ' ')\n    .replace(/\"/g, \"'\")           // Replace double quotes with single quotes\n    .replace(/\\\\/g, '')           // Remove backslashes\n    .replace(/\\s+/g, ' ')         // Replace multiple spaces with single space\n    .trim();                      \n}\n\nconst cleanBody = cleanForJSON(body);\n\nreturn [{\n  json: {\n    body: cleanBody,\n    promptText: `${cleanBody} \\nOptimize this into a single, engaging LinkedIn post:`\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        464
      ],
      "id": "34febfe0-25ed-42e7-ae76-cf4f6efbe849",
      "name": "Code1"
    }
  ],
  "connections": {
    "Register Upload": {
      "main": [
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "writing with ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Url": {
      "main": [
        [
          {
            "node": "Register Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Create Text Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "writing with ai": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "writing with ai1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Get Url",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Post to Linkdin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "writing with ai1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "87fd079f-e7f5-4773-8583-8247d1977d0c",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-24T09:18:43.074Z",
      "updatedAt": "2025-09-24T09:18:43.074Z",
      "role": "workflow:owner",
      "workflowId": "h81oZ8uVSK6PKAdw",
      "projectId": "DUObCiOoOXJuG68P"
    }
  ],
  "tags": []
}